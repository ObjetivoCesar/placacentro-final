/**
 * SCRIPT: Sincronizaci√≥n Directa desde Google Drive
 *
 * PROP√ìSITO:
 * - Descargar JSON desde Google Drive del cliente
 * - Validar estructura de datos
 * - Actualizar inventario local
 * - Mostrar estad√≠sticas de sincronizaci√≥n
 */

// URL del Google Drive proporcionada por el cliente
const driveUrl = "https://drive.google.com/file/d/1gdCOFgGFyBDKAycLBpCla3fislRLIFpR/view?usp=sharing"

// Convertir URL de Google Drive a URL de descarga directa
function convertGoogleDriveUrl(url) {
  const fileId = url.match(/\/d\/([a-zA-Z0-9-_]+)/)?.[1]
  if (fileId) {
    return `https://drive.google.com/uc?id=${fileId}&export=download`
  }
  return url
}

const fs = require("fs")

async function syncInventoryFromDrive() {
  try {
    console.log("=== SINCRONIZACI√ìN DESDE GOOGLE DRIVE ===")
    console.log("üîÑ Iniciando sincronizaci√≥n...")

    const downloadUrl = convertGoogleDriveUrl(driveUrl)
    console.log("üìç URL original:", driveUrl)
    console.log("üìç URL de descarga:", downloadUrl)

    console.log("üì• Descargando archivo...")

    // Descargar con headers espec√≠ficos para Google Drive
    const response = await fetch(downloadUrl, {
      method: "GET",
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        Accept: "application/json, text/plain, */*",
        "Accept-Language": "en-US,en;q=0.9",
        "Cache-Control": "no-cache",
        Pragma: "no-cache",
      },
    })

    console.log("üì° Status de respuesta:", response.status)

    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status} - ${response.statusText}`)
    }

    const responseText = await response.text()
    console.log("üìÑ Tama√±o de respuesta:", responseText.length, "caracteres")
    console.log("üìÑ Primeros 500 caracteres:")
    console.log(responseText.substring(0, 500))

    // Verificar si es HTML (error de Google Drive)
    if (responseText.trim().startsWith("<!DOCTYPE") || responseText.trim().startsWith("<html")) {
      console.error("‚ùå PROBLEMA: La respuesta es HTML, no JSON")
      console.log("üîç Esto significa que el archivo no es accesible p√∫blicamente")
      console.log("üìã SOLUCI√ìN:")
      console.log("   1. Abre el archivo en Google Drive")
      console.log("   2. Haz clic en 'Compartir' (bot√≥n azul)")
      console.log("   3. Cambia a 'Cualquier persona con el enlace'")
      console.log("   4. Aseg√∫rate que dice 'Lector' o 'Editor'")
      console.log("   5. Copia el nuevo enlace")
      return
    }

    // Parsear JSON
    let jsonData
    try {
      jsonData = JSON.parse(responseText)
      console.log("‚úÖ JSON parseado correctamente")
    } catch (parseError) {
      console.error("‚ùå Error parsing JSON:", parseError.message)
      console.error("‚ùå Contenido problem√°tico (primeros 200 chars):")
      console.error(responseText.substring(0, 200))
      throw new Error(`JSON inv√°lido: ${parseError.message}`)
    }

    // Validar que sea array
    if (!Array.isArray(jsonData)) {
      console.error("‚ùå El contenido no es un array:", typeof jsonData)
      console.log("üìÑ Contenido recibido:", jsonData)
      throw new Error("El archivo debe contener un array de productos")
    }

    console.log("üìä Productos encontrados:", jsonData.length)

    // Validar estructura de cada producto
    const requiredFields = ["id", "name", "category", "price", "stock"]
    const errors = []

    for (let i = 0; i < Math.min(jsonData.length, 5); i++) {
      // Validar solo los primeros 5
      const product = jsonData[i]
      console.log(`üîç Validando producto ${i + 1}:`, {
        id: product.id,
        name: product.name,
        category: product.category,
        price: product.price,
        stock: product.stock,
      })

      for (const field of requiredFields) {
        if (!(field in product) || product[field] === null || product[field] === undefined) {
          errors.push(`Producto ${i + 1} (${product.name || "sin nombre"}): Campo '${field}' faltante o vac√≠o`)
        }
      }
    }

    if (errors.length > 0) {
      console.error("‚ùå Errores de validaci√≥n encontrados:")
      errors.forEach((error) => console.error("   ‚Ä¢", error))
      throw new Error(`Errores de validaci√≥n: ${errors.length} problemas encontrados`)
    }

    console.log("‚úÖ Validaci√≥n completada exitosamente")

    // Mostrar estad√≠sticas
    const externalImages = jsonData.filter((p) => p.image?.startsWith("http"))
    const categories = [...new Set(jsonData.map((p) => p.category))]
    const totalValue = jsonData.reduce((sum, p) => sum + p.price * p.stock, 0)

    console.log("üìä ESTAD√çSTICAS DEL INVENTARIO:")
    console.log("   üì¶ Total productos:", jsonData.length)
    console.log("   üñºÔ∏è Im√°genes externas:", externalImages.length)
    console.log("   üìÇ Categor√≠as:", categories.length)
    console.log("   üí∞ Valor total inventario: $", totalValue.toFixed(2))
    console.log("   üìã Categor√≠as encontradas:", categories.join(", "))

    // Mostrar preview de productos
    console.log("\nüîç PREVIEW DE PRODUCTOS (primeros 5):")
    jsonData.slice(0, 5).forEach((product, index) => {
      console.log(`   ${index + 1}. ${product.name}`)
      console.log(`      üí∞ Precio: $${product.price}`)
      console.log(`      üì¶ Stock: ${product.stock}`)
      console.log(`      üìÇ Categor√≠a: ${product.category}`)
      console.log(
        `      üñºÔ∏è Imagen: ${product.image ? (product.image.startsWith("http") ? "Externa" : "Local") : "Sin imagen"}`,
      )
      console.log("")
    })

    // Guardar inventario actualizado
    fs.writeFileSync("data/inventory.json", JSON.stringify(jsonData, null, 2), "utf-8")
    // Crear backup
    fs.writeFileSync(
      `data/inventory_backup_${Date.now()}.json`,
      JSON.stringify(jsonData, null, 2),
      "utf-8"
    )
    console.log("üíæ Inventario actualizado y backup creado.")

    console.log("\n‚úÖ SINCRONIZACI√ìN COMPLETADA EXITOSAMENTE")
    console.log("üéâ El inventario se ha actualizado con", jsonData.length, "productos")
    console.log("üì± Los productos aparecer√°n inmediatamente en la aplicaci√≥n")

    return {
      success: true,
      productsCount: jsonData.length,
      externalImagesCount: externalImages.length,
      categories: categories,
      totalValue: totalValue,
      products: jsonData.slice(0, 3), // Muestra solo los primeros 3
    }
  } catch (error) {
    console.error("‚ùå ERROR EN SINCRONIZACI√ìN:")
    console.error("   Mensaje:", error.message)
    console.error("   Tipo:", error.name)

    console.log("\nüîß POSIBLES SOLUCIONES:")
    console.log("   1. Verificar que el archivo est√© compartido p√∫blicamente")
    console.log("   2. Comprobar que el contenido sea JSON v√°lido")
    console.log("   3. Asegurar que tenga la estructura correcta de productos")
    console.log("   4. Intentar con un archivo m√°s peque√±o para pruebas")

    return {
      success: false,
      error: error.message,
    }
  }
}

// Ejecutar sincronizaci√≥n
console.log("üöÄ INICIANDO PROCESO DE SINCRONIZACI√ìN...")
syncInventoryFromDrive()
  .then((result) => {
    if (result.success) {
      console.log("\nüéä ¬°PROCESO COMPLETADO CON √âXITO!")
      console.log("üìä Resumen final:")
      console.log("   ‚úÖ Productos sincronizados:", result.productsCount)
      console.log("   üñºÔ∏è Im√°genes externas:", result.externalImagesCount)
      console.log("   üìÇ Categor√≠as:", result.categories.length)
      console.log("   üí∞ Valor total: $", result.totalValue?.toFixed(2))
    } else {
      console.log("\n‚ùå PROCESO FALL√ì")
      console.log("üîç Revisar los mensajes de error arriba para m√°s detalles")
    }
  })
  .catch((error) => {
    console.error("\nüí• ERROR CR√çTICO:", error.message)
  })
